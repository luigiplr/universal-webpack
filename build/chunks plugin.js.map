{"version":3,"sources":["../source/chunks plugin.js"],"names":["Chunk_file_names_plugin","configuration","options","prototype","apply","compiler","webpack_configuration","output_file_path","chunk_info_filename","plugin","stats","json","toJson","context","chunkModules","silent","assets_base_url","devServer","publicPath","chunk_filename_info","filename_info","outputFileSync","assets_by_chunk","assetsByChunkName","assets_chunks","javascript","styles","get_assets","name","extension","chunk","Array","isArray","filter","extname","map","forEach","style"],"mappings":";;;;;;;;;;;;;;kBAMwBA,uB;;AANxB;;;;AACA;;;;AAEA;;;;AACA;;;;AAEe,SAASA,uBAAT,CAAiCC,aAAjC,EAAgDC,OAAhD,EACf;AACC,MAAKD,aAAL,GAAqBA,aAArB;AACA,MAAKC,OAAL,GAAeA,OAAf;AACA;;AAEDF,wBAAwBG,SAAxB,CAAkCC,KAAlC,GAA0C,UAASC,QAAT,EAC1C;AACC;AACA;AACA;AACA;AACA,KAAMC,wBAAwB,KAAKL,aAAnC;;AAEA,KAAMC,UAAU,KAAKA,OAArB;;AAEA;AACA,KAAMK,mBAAmB,kCAAqBD,qBAArB,EAA4CJ,QAAQM,mBAApD,CAAzB;;AAEA;AACA;AACAH,UAASI,MAAT,CAAgB,MAAhB,EAAwB,UAASC,KAAT,EACxB;AACC,MAAMC,OAAOD,MAAME,MAAN,CACZ;AACAC,YAASP,sBAAsBO,OAD/B;;AAGA;AACA;AACAC,iBAAc;;AALd,GADY,CAAb;;AAiBA;AACA,MAAI,CAACZ,QAAQa,MAAb,EACA,CAIC;AAHA;AACA;AACA;;;AAGD;AACA,MAAMC,kBAAmBV,sBAAsBW,SAAtB,IAAmCX,sBAAsBW,SAAtB,CAAgCC,UAApE,GAAkFZ,sBAAsBW,SAAtB,CAAgCC,UAAlH,GAA+HP,KAAKO,UAA5J;;AAEA;AACA,MAAMC,sBAAsBC,cAAcT,IAAd,EAAoBK,eAApB,CAA5B;;AAEA;AACA,oBAAGK,cAAH,CAAkBd,gBAAlB,EAAoC,yBAAeY,mBAAf,CAApC;AACA,EAnCD;AAoCA,CAnDD;;AAqDA;AACA;AACA,SAASC,aAAT,CAAuBT,IAAvB,EAA6BK,eAA7B,EACA;AACC,KAAMM,kBAAkBX,KAAKY,iBAA7B;;AAEA,KAAMC,gBACN;AACCC,cAAY,EADb;AAECC,UAAQ;AAFT,EADA;;AAMA;AACA,UAASC,UAAT,CAAoBC,IAApB,EAA0BC,SAA1B,EACA;AACC,MAAIC,QAAQnB,KAAKY,iBAAL,CAAuBK,IAAvB,CAAZ;;AAEA;AACA,MAAI,CAAEG,MAAMC,OAAN,CAAcF,KAAd,CAAN,EACA;AACCA,WAAQ,CAACA,KAAD,CAAR;AACA;;AAED,SAAOA;AACN;AADM,GAELG,MAFK,CAEE;AAAA,UAAQ,eAAKC,OAAL,CAAaN,IAAb,YAA2BC,SAAnC;AAAA,GAFF;AAGN;AAHM,GAILM,GAJK,CAID;AAAA,UAAQnB,kBAAkBY,IAA1B;AAAA,GAJC,CAAP;AAKA;;AAED;AACA,qBAAYN,eAAZ,EAA6Bc,OAA7B,CAAqC,UAASR,IAAT,EACrC;AACC;;AAEA;;AAEA,MAAMH,aAAaE,WAAWC,IAAX,EAAiB,IAAjB,EAAuB,CAAvB,CAAnB;AACA;;AAEA,MAAIH,UAAJ,EACA;AACC;AACAD,iBAAcC,UAAd,CAAyBG,IAAzB,IAAiCH,UAAjC;AACA;;AAED;;AAEA,MAAMY,QAAQV,WAAWC,IAAX,EAAiB,KAAjB,EAAwB,CAAxB,CAAd;AACA;;AAEA,MAAIS,KAAJ,EACA;AACC;AACAb,iBAAcE,MAAd,CAAqBE,IAArB,IAA6BS,KAA7B;AACA;AACD,EAzBD;;AA2BA,QAAOb,aAAP;AACA","file":"chunks plugin.js","sourcesContent":["import path from 'path'\r\nimport fs   from 'fs-extra'\r\n\r\nimport output_webpack_stats from './output webpack stats'\r\nimport { chunk_info_file_path } from './chunks'\r\n\r\nexport default function Chunk_file_names_plugin(configuration, options)\r\n{\r\n\tthis.configuration = configuration\r\n\tthis.options = options\r\n}\r\n\r\nChunk_file_names_plugin.prototype.apply = function(compiler)\r\n{\r\n\t// // Webpack configuration\r\n\t// // (has wrong `output.path` at this point\r\n\t// //  so `output.path` has to be passed when constructing an instance)\r\n\t// const webpack_configuration = compiler.options\r\n\tconst webpack_configuration = this.configuration\r\n\r\n\tconst options = this.options\r\n\r\n\t// chunk filename info file path\r\n\tconst output_file_path = chunk_info_file_path(webpack_configuration, options.chunk_info_filename)\r\n\r\n\t// when all is done\r\n\t// https://github.com/webpack/docs/wiki/plugins\r\n\tcompiler.plugin('done', function(stats)\r\n\t{\r\n\t\tconst json = stats.toJson\r\n\t\t({\r\n\t\t\tcontext: webpack_configuration.context,\r\n\r\n\t\t\t// Add built modules information to chunk information.\r\n\t\t\t// What for is it here? I don't know. It's a copy & paste from the Webpack author's code.\r\n\t\t\tchunkModules: true,\r\n\r\n\t\t\t// // The following modules will be excluded from Webpack stats Json file.\r\n\t\t\t// // What for is it here? I don't know. It's a copy & paste from the Webpack author's code.\r\n\t\t\t// exclude:\r\n\t\t\t// [\r\n\t\t\t// \t/node_modules[\\\\\\/]react(-router)?[\\\\\\/]/,\r\n\t\t\t// \t/node_modules[\\\\\\/]items-store[\\\\\\/]/\r\n\t\t\t// ]\r\n\t\t})\r\n\r\n\t\t// output some info to the console if in development mode\r\n\t\tif (!options.silent)\r\n\t\t{\r\n\t\t\t// outputs stats info to the console\r\n\t\t\t// (only needed in development mode)\r\n\t\t\t// output_webpack_stats(stats, json)\r\n\t\t}\r\n\r\n\t\t// \"publicPath\" (will be prepended to chunk file names)\r\n\t\tconst assets_base_url = (webpack_configuration.devServer && webpack_configuration.devServer.publicPath) ? webpack_configuration.devServer.publicPath : json.publicPath\r\n\r\n\t\t// Generate chunk filename info\r\n\t\tconst chunk_filename_info = filename_info(json, assets_base_url)\r\n\r\n\t\t// Write chunk filename info to disk\r\n\t\tfs.outputFileSync(output_file_path, JSON.stringify(chunk_filename_info))\r\n\t})\r\n}\r\n\r\n// Generates chunk filename info\r\n// (`assets_base_url` will be prepended to chunk file names)\r\nfunction filename_info(json, assets_base_url)\r\n{\r\n\tconst assets_by_chunk = json.assetsByChunkName\r\n\r\n\tconst assets_chunks =\r\n\t{\r\n\t\tjavascript: {},\r\n\t\tstyles: {}\r\n\t}\r\n\r\n\t// gets asset paths by name and extension of their chunk\r\n\tfunction get_assets(name, extension)\r\n\t{\r\n\t\tlet chunk = json.assetsByChunkName[name]\r\n\r\n\t\t// a chunk could be a string or an array, so make sure it is an array\r\n\t\tif (!(Array.isArray(chunk)))\r\n\t\t{\r\n\t\t\tchunk = [chunk]\r\n\t\t}\r\n\r\n\t\treturn chunk\r\n\t\t\t// filter by extension\r\n\t\t\t.filter(name => path.extname(name) === `.${extension}`)\r\n\t\t\t// adjust the real path (can be http, filesystem)\r\n\t\t\t.map(name => assets_base_url + name)\r\n\t}\r\n\r\n\t// for each chunk name (\"main\", \"common\", ...)\r\n\tObject.keys(assets_by_chunk).forEach(function(name)\r\n\t{\r\n\t\t// log.debug(`getting javascript and styles for chunk \"${name}\"`)\r\n\r\n\t\t// get javascript chunk real file path\r\n\r\n\t\tconst javascript = get_assets(name, 'js')[0]\r\n\t\t// the second asset is usually a source map\r\n\r\n\t\tif (javascript)\r\n\t\t{\r\n\t\t\t// log.debug(` (got javascript)`)\r\n\t\t\tassets_chunks.javascript[name] = javascript\r\n\t\t}\r\n\r\n\t\t// get style chunk real file path\r\n\r\n\t\tconst style = get_assets(name, 'css')[0]\r\n\t\t// the second asset is usually a source map\r\n\r\n\t\tif (style)\r\n\t\t{\r\n\t\t\t// log.debug(` (got style)`)\r\n\t\t\tassets_chunks.styles[name] = style\r\n\t\t}\r\n\t})\r\n\r\n\treturn assets_chunks\r\n}\r\n"]}