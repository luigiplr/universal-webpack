{"version":3,"sources":["../source/client configuration.js"],"names":["client_configuration","webpack_configuration","settings","options","configuration","plugins","push","silent","chunk_info_filename","development","css_bundle","css_bundle_filename","extract_css","extract_text_plugin_instance","allChunks","loader","style_loader","loaders","filter","before_style_loader","slice","indexOf","after_style_loader","extract_text_plugin_extract","remove","style_loader_and_before","filename","plugin","error","message","fallbackLoader","result","extract"],"mappings":"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","file":"client configuration.js","sourcesContent":["import extract_text_plugin from 'extract-text-webpack-plugin'\n\nimport chunks_plugin from './chunks plugin'\nimport { clone, starts_with } from './helpers'\nimport { find_style_loaders, is_style_loader, normalize_loaders } from './loaders'\n\nexport default function client_configuration(webpack_configuration, settings, options = {})\n{\n\tconst configuration = clone(webpack_configuration)\n\n\tconfiguration.plugins = configuration.plugins || []\n\n\tconfiguration.plugins.push\n\t(\n\t\t// Add chunk filename info plugin\n\t\t//\n\t\t// Writes client-side build chunks filename info\n\t\t// for later use inside server-side rendering code\n\t\t// (`<script src=.../>` and `<link rel=\"style\" href=.../>` tags)\n\t\t//\n\t\t// Cloning Webpack configuration here\n\t\t// because `webpack-dev-server` seems to alter it\n\t\t// by changing the already predefined `.output.path`.\n\t\t//\n\t\tnew chunks_plugin(clone(configuration), { silent: settings.silent, chunk_info_filename: settings.chunk_info_filename })\n\t)\n\n\t// Not sure about the name yet\n\t// // Normalize legacy options\n\t// if (options.css_bundle)\n\t// {\n\t// \tconsole.warn(\"`css_bundle` option is now called `extract_styles`\")\n\t// \toptions.extract_styles = options.css_bundle\n\t// \tdelete options.css_bundle\n\t// }\n\n\t// If it's a client-side development webpack build,\n\t// and CSS bundle extraction is enabled,\n\t// then extract all CSS styles into a file.\n\t// (without removing them from the code)\n\tif (options.development && options.css_bundle)\n\t{\n\t\tlet css_bundle_filename = '[name]-[contenthash].css'\n\n\t\tif (typeof options.css_bundle === 'string')\n\t\t{\n\t\t\tcss_bundle_filename = options.css_bundle\n\t\t}\n\n\t\t// Extract styles into a file\n\t\t// (without removing them from the code in this case).\n\t\t//\n\t\t// It copies contents of each `require(\"style.css\")`\n\t\t// into one big CSS file on disk\n\t\t// which will be later read on the server-side\n\t\t// and inserted into `<head><style></style></head>`,\n\t\t// so that in development mode there's no\n\t\t// \"flash of unstyled content\" on page reload.\n\t\t//\n\t\t// \"allChunks: true\" option means that the styles from all chunks\n\t\t// (think \"entry points\") will be extracted into a single big CSS file.\n\t\t//\n\t\tconst extract_css = extract_text_plugin_instance(css_bundle_filename, { allChunks: true })\n\n\t\t// Find module loaders with `style-loader`,\n\t\t// and set those module loaders to `extract-text-webpack-plugin` loader\n\t\tfor (let loader of find_style_loaders(configuration))\n\t\t{\n\t\t\tnormalize_loaders(loader)\n\n\t\t\tconst style_loader = loader.loaders.filter(is_style_loader)[0]\n\n\t\t\tconst before_style_loader = loader.loaders.slice(0, loader.loaders.indexOf(style_loader))\n\t\t\tconst after_style_loader  = loader.loaders.slice(loader.loaders.indexOf(style_loader) + 1)\n\n\t\t\t// The first argument to the .extract() function is the name of the loader\n\t\t\t// (\"style-loader\" in this case) to be applied to non-top-level-chunks in case of \"allChunks: false\" option.\n\t\t\t// since in this configuration \"allChunks: true\" option is used, this first argument is irrelevant.\n\t\t\t//\n\t\t\t// `remove: false` ensures that the styles being extracted\n\t\t\t// aren't erased from the chunk javascript file.\n\t\t\t//\n\t\t\t// I'm also prepending another `style-loader` here\n\t\t\t// to re-enable adding these styles to the <head/> of the page on-the-fly.\n\t\t\t//\n\t\t\tloader.loader = 'style-loader!' + extract_text_plugin_extract(extract_css, before_style_loader, after_style_loader, { remove: false })\n\t\t\tdelete loader.loaders\n\t\t}\n\n\t\t// Add the `extract-text-webpack-plugin` to the list of plugins.\n\t\t// It will extract all CSS into a file\n\t\t// (without removing it from the code in this case)\n\t\tconfiguration.plugins.push(extract_css)\n\t}\n\n\t// Use `extract-text-webpack-plugin`\n\t// to extract all CSS into a separate file\n\t// (in production)\n\tif (options.development === false && options.css_bundle !== false)\n\t{\n\t\tlet css_bundle_filename = '[name]-[contenthash].css'\n\n\t\tif (typeof options.css_bundle === 'string')\n\t\t{\n\t\t\tcss_bundle_filename = options.css_bundle\n\t\t}\n\n\t\t// Extract styles into a file\n\t\t// (removing them from the code in this case).\n\t\t//\n\t\t// It moves contents of each `require(\"style.css\")`\n\t\t// into one big CSS file on disk\n\t\t// which will be later read on the server-side\n\t\t// and inserted into `<head><style></style></head>`.\n\t\t//\n\t\t// \"allChunks: true\" option means that the styles from all chunks\n\t\t// (think \"entry points\") will be extracted into a single big CSS file.\n\t\t//\n\t\tconst extract_css = extract_text_plugin_instance(css_bundle_filename, { allChunks: true })\n\n\t\t// Find module loaders with `style-loader`,\n\t\t// and set those module loaders to `extract-text-webpack-plugin` loader\n\t\tfor (let loader of find_style_loaders(configuration))\n\t\t{\n\t\t\tnormalize_loaders(loader)\n\n\t\t\tconst style_loader = loader.loaders.filter(is_style_loader)[0]\n\n\t\t\tconst style_loader_and_before = loader.loaders.slice(0, loader.loaders.indexOf(style_loader) + 1)\n\t\t\tconst after_style_loader      = loader.loaders.slice(loader.loaders.indexOf(style_loader) + 1)\n\n\t\t\t// The first argument to the .extract() function is the name of the loader\n\t\t\t// (\"style-loader\" in this case) to be applied to non-top-level-chunks in case of \"allChunks: false\" option.\n\t\t\t// since in this configuration \"allChunks: true\" option is used, this first argument is irrelevant.\n\t\t\t//\n\t\t\tloader.loader = extract_text_plugin_extract(extract_css, style_loader_and_before, after_style_loader)\n\t\t\tdelete loader.loaders\n\t\t}\n\n\t\t// Add the `extract-text-webpack-plugin` to the list of plugins.\n\t\t// It will extract all CSS into a file\n\t\t// (removing it from the code in this case)\n\t\tconfiguration.plugins.push(extract_css)\n\t}\n\n\t// Done\n\treturn configuration\n}\n\n// Supports both v1 and v2 of `extract-text-webpack-plugin`\nfunction extract_text_plugin_instance(filename, options = {})\n{\n\tlet plugin\n\n\ttry\n\t{\n\t\tplugin = new extract_text_plugin(filename, options)\n\t}\n\tcatch (error)\n\t{\n\t\tif (starts_with(error.message, 'Breaking change: ExtractTextPlugin now only takes a single argument.'))\n\t\t{\n\t\t\tplugin = new extract_text_plugin({ ...options, filename })\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow error\n\t\t}\n\t}\n\n\treturn plugin\n}\n\n// Supports both v1 and v2 of `extract-text-webpack-plugin`\nfunction extract_text_plugin_extract(plugin, fallbackLoader, loader, options = {})\n{\n\tlet result\n\n\ttry\n\t{\n\t\tresult = plugin.extract(fallbackLoader, loader, options)\n\t}\n\tcatch (error)\n\t{\n\t\tif (starts_with(error.message, 'Breaking change: extract now only takes a single argument.'))\n\t\t{\n\t\t\tresult = plugin.extract({ ...options, fallbackLoader, loader })\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow error\n\t\t}\n\t}\n\n\treturn result\n}\n"]}