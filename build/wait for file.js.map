{"version":3,"sources":["../source/wait for file.js"],"names":["wait_for_file","fs_exists","path","tick_interval","message_timer","message_interval","tick","exists","contents","readFileSync","resolve","console","log","check_condition","interval","done","not_done_yet","then","condition_is_met","setTimeout","reject"],"mappings":";;;;;;;;;;;;;;;;;;kBAUwBA,a;QAsERC,S,GAAAA,S;;AAhFhB;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASD,aAAT,CAAuBE,IAAvB,EACf;AAAA;;AACC;AACA,QAAO,sBAAY,mBACnB;AACC,MAAMC,gBAAgB,GAAtB;;AAEA;AACA,MAAIC,gBAAgB,CAApB;AACA,MAAMC,mBAAmB,IAAzB,CALD,CAK+B;;AAE9BC,kEAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAGsBL,UAAUC,IAAV,CAHtB;;AAAA;AAGOK,aAHP;;AAAA,WAKMA,MALN;AAAA;AAAA;AAAA;;AAAA,wCAOS,KAPT;;AAAA;;AAUC;AACA;AACMC,eAZP,GAYkB,aAAGC,YAAH,CAAgBP,IAAhB,EAAsB,MAAtB,CAZlB;;AAcC;;AAdD,WAeMM,QAfN;AAAA;AAAA;AAAA;;AAAA,wCAiBS,KAjBT;;AAAA;AAAA,wCAoBQ,IApBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFD,IAwBCL,aAxBD,EAyBCO,OAzBD,EA0BC,YACA;AACCN,oBAAiBD,aAAjB;;AAEA,OAAIC,iBAAiBC,gBAArB,EACA;AACCD,oBAAgB,CAAhB;;AAEAO,YAAQC,GAAR,QAAiBV,IAAjB;AACAS,YAAQC,GAAR,CAAY,uCAAZ;AACA;AACD,GArCF;AAuCA,EA/CM,CAAP;AAgDA;;AAED,SAASN,IAAT,CAAcO,eAAd,EAA+BC,QAA/B,EAAyCC,IAAzC,EAA+CC,YAA/C,EACA;AACCH,mBAAkBI,IAAlB,CAAuB,UAASC,gBAAT,EACvB;AACC,MAAIA,gBAAJ,EACA;AACC,UAAOH,MAAP;AACA;;AAEDC;;AAEAG,aAAW;AAAA,UAAMb,KAAKO,eAAL,EAAsBC,QAAtB,EAAgCC,IAAhC,EAAsCC,YAAtC,CAAN;AAAA,GAAX,EAAsEF,QAAtE;AACA,EAVD;AAWA;;AAED;AACA;AACO,SAASb,SAAT,CAAmBC,IAAnB,EACP;AACC,QAAO,sBAAY,UAACQ,OAAD,EAAUU,MAAV,EACnB;AACC,eAAGb,MAAH,CAAUL,IAAV,EAAgB;AAAA,UAAUQ,QAAQH,MAAR,CAAV;AAAA,GAAhB;AACA,EAHM,CAAP;AAIA","file":"wait for file.js","sourcesContent":["import fs from 'fs'\n\n// Waits for `build/server.js` to be created \n// after Webpack build process finishes.\n//\n// The Promise is resolved when `build/server.js` has been found \n// (this is needed for development because `webpack-dev-server` \n//  and your Node.js application server are run in parallel,\n//  and are restarted simultaneously).\n//\nexport default function wait_for_file(path)\n{\n\t// waits for condition to be met, then resolves the promise\n\treturn new Promise(resolve =>\n\t{\n\t\tconst tick_interval = 300\n\n\t\t// show the message not too often\n\t\tlet message_timer = 0\n\t\tconst message_interval = 2000 // in milliseconds\n\n\t\ttick\n\t\t(\n\t\t\tasync () =>\n\t\t\t{\n\t\t\t\t// Check if the file exists in the filesystem\n\t\t\t\tconst exists = await fs_exists(path)\n\n\t\t\t\tif (!exists)\n\t\t\t\t{\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\t// Check if the file contents have been written to disk\n\t\t\t\t// https://github.com/halt-hammerzeit/universal-webpack/issues/24\n\t\t\t\tconst contents = fs.readFileSync(path, 'utf8')\n\n\t\t\t\t// Check if the file contents is empty\n\t\t\t\tif (!contents)\n\t\t\t\t{\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\treturn true\n\t\t\t},\n\t\t\ttick_interval,\n\t\t\tresolve,\n\t\t\t() =>\n\t\t\t{\n\t\t\t\tmessage_timer += tick_interval\n\n\t\t\t\tif (message_timer >= message_interval)\n\t\t\t\t{\n\t\t\t\t\tmessage_timer = 0\n\n\t\t\t\t\tconsole.log(`(\"${path}\" not found)`)\n\t\t\t\t\tconsole.log('(waiting for Webpack build to finish)')\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\t})\n}\n\nfunction tick(check_condition, interval, done, not_done_yet)\n{\n\tcheck_condition().then(function(condition_is_met)\n\t{\n\t\tif (condition_is_met)\n\t\t{\n\t\t\treturn done()\n\t\t}\n\n\t\tnot_done_yet()\n\n\t\tsetTimeout(() => tick(check_condition, interval, done, not_done_yet), interval)\n\t})\n}\n\n// Checks if a filesystem path exists.\n// Returns a promise\nexport function fs_exists(path)\n{\n\treturn new Promise((resolve, reject) => \n\t{\n\t\tfs.exists(path, exists => resolve(exists))\n\t})\n}\n"]}